{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  status: '',\n  items: []\n};\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\n  const items = JSON.parse(localStorage.getItem('cart')) || [];\n  return items;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addedTocart(state, action) {\n      state.items.push({ ...action.payload,\n        quantity: 1\n      });\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n\n    changeQuantity(state, action) {\n      const {\n        id,\n        buttonaction\n      } = action.payload;\n      console.log(state.items);\n      const changedArr = state.items.find(single => single._id === id);\n      console.log(changedArr); // buttonaction === 'inc' ? ++changedArr.quantity : ++changedArr.quantity\n      // console.log({\n      //     id,\n      //     buttonaction\n      // })\n    }\n\n  },\n  extraReducers: {\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCartItems.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.items = state.items.concat(action.payload);\n    },\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'something went wrong';\n    }\n  }\n});\nexport const {\n  addedTocart,\n  changeQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["E:/Study Material/Projects/Fullstack/e-commerce/client/src/features/cartSlice.js"],"names":["createAsyncThunk","createSlice","initialState","status","items","fetchCartItems","JSON","parse","localStorage","getItem","cartSlice","name","reducers","addedTocart","state","action","push","payload","quantity","setItem","stringify","changeQuantity","id","buttonaction","console","log","changedArr","find","single","_id","extraReducers","pending","fulfilled","concat","actions","reducer"],"mappings":"AAAA,SAAUA,gBAAV,EAA4BC,WAA5B,QAA+C,kBAA/C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMI,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EAA1D;AAEA,SAAOL,KAAP;AACH,CAJ6C,CAAvC;AAMP,MAAMM,SAAS,GAAGT,WAAW,CAAC;AAC1BU,EAAAA,IAAI,EAAE,MADoB;AAE1BT,EAAAA,YAF0B;AAG1BU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAOC,MAAP,EAAc;AACrBD,MAAAA,KAAK,CAACV,KAAN,CAAYY,IAAZ,CAAiB,EAAE,GAAGD,MAAM,CAACE,OAAZ;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAAjB;AACAV,MAAAA,YAAY,CAACW,OAAb,CAAqB,MAArB,EAA4Bb,IAAI,CAACc,SAAL,CAAeN,KAAK,CAACV,KAArB,CAA5B;AACH,KAJK;;AAKNiB,IAAAA,cAAc,CAACP,KAAD,EAAOC,MAAP,EAAc;AACxB,YAAM;AAAEO,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAsBR,MAAM,CAACE,OAAnC;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACV,KAAlB;AACA,YAAMsB,UAAU,GAAGZ,KAAK,CAACV,KAAN,CAAYuB,IAAZ,CAAkBC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeP,EAA3C,CAAnB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAJwB,CAKxB;AACA;AACA;AACA;AACA;AACH;;AAfK,GAHgB;AAoB1BI,EAAAA,aAAa,EAAE;AACX,KAACzB,cAAc,CAAC0B,OAAhB,GAA0B,CAACjB,KAAD,EAAOC,MAAP,KAAkB;AACxCD,MAAAA,KAAK,CAACX,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACE,cAAc,CAAC2B,SAAhB,GAA4B,CAAClB,KAAD,EAAOC,MAAP,KAAkB;AAC1CD,MAAAA,KAAK,CAACX,MAAN,GAAe,SAAf;AACAW,MAAAA,KAAK,CAACV,KAAN,GAAcU,KAAK,CAACV,KAAN,CAAY6B,MAAZ,CAAmBlB,MAAM,CAACE,OAA1B,CAAd;AACH,KAPU;AAQX,KAACZ,cAAc,CAAC0B,OAAhB,GAA0B,CAACjB,KAAD,EAAOC,MAAP,KAAkB;AACxCD,MAAAA,KAAK,CAACX,MAAN,GAAe,sBAAf;AACH;AAVU;AApBW,CAAD,CAA7B;AAkCA,OAAO,MAAM;AAAEU,EAAAA,WAAF;AAAcQ,EAAAA;AAAd,IAAiCX,SAAS,CAACwB,OAAjD;AACP,eAAexB,SAAS,CAACyB,OAAzB","sourcesContent":["import  { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    status: '',\r\n    items: []\r\n}\r\n\r\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\r\n    const items = JSON.parse(localStorage.getItem('cart')) || []\r\n\r\n    return items\r\n})\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addedTocart(state,action){\r\n            state.items.push({ ...action.payload, quantity: 1})\r\n            localStorage.setItem('cart',JSON.stringify(state.items))\r\n        },\r\n        changeQuantity(state,action){\r\n            const { id, buttonaction} = action.payload\r\n            console.log(state.items)\r\n            const changedArr = state.items.find( single => single._id === id)\r\n            console.log(changedArr)\r\n            // buttonaction === 'inc' ? ++changedArr.quantity : ++changedArr.quantity\r\n            // console.log({\r\n            //     id,\r\n            //     buttonaction\r\n            // })\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCartItems.fulfilled]: (state,action) => {\r\n            state.status = 'success'\r\n            state.items = state.items.concat(action.payload)\r\n        },\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'something went wrong'\r\n        },\r\n    }\r\n})\r\n\r\nexport const { addedTocart,changeQuantity } = cartSlice.actions\r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}