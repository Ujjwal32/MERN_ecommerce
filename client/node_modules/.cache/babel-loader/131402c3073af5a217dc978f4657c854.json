{"ast":null,"code":"import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';\nconst initialState = {\n  status: '',\n  items: []\n};\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\n  const items = JSON.parse(localStorage.getItem('cart')) || [];\n  return items;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addedTocart(state, action) {\n      const id = action.payload._id;\n      const result = state.items.some(single => single._id === id);\n\n      if (result) {\n        return;\n      } else {\n        state.items.push({ ...action.payload,\n          quantity: 1\n        });\n        localStorage.setItem('cart', JSON.stringify(state.items));\n      }\n    },\n\n    changeQuantity(state, action) {\n      const {\n        id,\n        buttonaction\n      } = action.payload;\n      const changedArr = state.items && state.items.filter(single => single._id === id)[0];\n      buttonaction === 'inc' ? ++changedArr.quantity : --changedArr.quantity;\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n\n    deleteCartItems(state, action) {\n      state.items = state.items.filter(single => single._id !== action.payload);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    },\n\n    emptyCart(state, action) {\n      state.items = [];\n      localStorage.removeItem('cart');\n    }\n\n  },\n  extraReducers: {\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCartItems.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.items = state.items.concat(action.payload);\n    },\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'something went wrong';\n    }\n  }\n});\nexport const {\n  addedTocart,\n  changeQuantity,\n  deleteCartItems,\n  emptyCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["E:/Study Material/Projects/Fullstack/e-commerce/client/src/features/cartSlice.js"],"names":["createAsyncThunk","createSlice","current","initialState","status","items","fetchCartItems","JSON","parse","localStorage","getItem","cartSlice","name","reducers","addedTocart","state","action","id","payload","_id","result","some","single","push","quantity","setItem","stringify","changeQuantity","buttonaction","changedArr","filter","deleteCartItems","emptyCart","removeItem","extraReducers","pending","fulfilled","concat","actions","reducer"],"mappings":"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","sourcesContent":["import  { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    status: '',\r\n    items: []\r\n}\r\n\r\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\r\n    const items = JSON.parse(localStorage.getItem('cart')) || []\r\n\r\n    return items\r\n})\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addedTocart(state,action){\r\n            const id = action.payload._id\r\n            const result = state.items.some(single => single._id === id)\r\n            if(result){\r\n                return;\r\n            } else {\r\n                state.items.push({ ...action.payload, quantity: 1})\r\n                localStorage.setItem('cart',JSON.stringify(state.items))\r\n            }\r\n            \r\n        },\r\n        changeQuantity(state,action){\r\n            const { id, buttonaction} = action.payload\r\n            const changedArr = state.items && state.items.filter( single => single._id === id)[0]\r\n            buttonaction === 'inc' ? ++changedArr.quantity : --changedArr.quantity\r\n            localStorage.setItem('cart',JSON.stringify(state.items))\r\n        },\r\n        deleteCartItems(state,action){\r\n            state.items = state.items.filter(single => single._id !== action.payload)\r\n            localStorage.setItem('cart',JSON.stringify(state.items))\r\n        },\r\n        emptyCart(state,action){\r\n            state.items = []\r\n            localStorage.removeItem('cart')\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCartItems.fulfilled]: (state,action) => {\r\n            state.status = 'success'\r\n            state.items = state.items.concat(action.payload)\r\n        },\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'something went wrong'\r\n        },\r\n    }\r\n})\r\n\r\nexport const { addedTocart,changeQuantity,deleteCartItems,emptyCart } = cartSlice.actions\r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}