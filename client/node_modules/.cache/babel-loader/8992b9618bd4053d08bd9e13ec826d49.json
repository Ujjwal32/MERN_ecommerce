{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  status: '',\n  items: []\n};\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\n  const items = JSON.parse(localStorage.getItem('cartItems')) || [];\n  return items;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addedTocart(state, action) {\n      state.items.push(action.payload);\n      localStorage.setItem('cart', JSON.stringify(state.items));\n    }\n\n  },\n  extraReducers: {\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchCartItems.fulfilled]: (state, action) => {\n      state.status = 'success';\n      state.items = state.items.concat(action.payload);\n    },\n    [fetchCartItems.pending]: (state, action) => {\n      state.status = 'something went wrong';\n    }\n  }\n});\nexport const {\n  addedTocart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["E:/Study Material/Projects/Fullstack/e-commerce/client/src/features/cartSlice.js"],"names":["createAsyncThunk","createSlice","initialState","status","items","fetchCartItems","JSON","parse","localStorage","getItem","cartSlice","name","reducers","addedTocart","state","action","push","payload","setItem","stringify","extraReducers","pending","fulfilled","concat","actions","reducer"],"mappings":"AAAA,SAAUA,gBAAV,EAA4BC,WAA5B,QAA+C,kBAA/C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMI,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,KAAiD,EAA/D;AAEA,SAAOL,KAAP;AACH,CAJ6C,CAAvC;AAMP,MAAMM,SAAS,GAAGT,WAAW,CAAC;AAC1BU,EAAAA,IAAI,EAAE,MADoB;AAE1BT,EAAAA,YAF0B;AAG1BU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAOC,MAAP,EAAc;AACrBD,MAAAA,KAAK,CAACV,KAAN,CAAYY,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACAT,MAAAA,YAAY,CAACU,OAAb,CAAqB,MAArB,EAA4BZ,IAAI,CAACa,SAAL,CAAeL,KAAK,CAACV,KAArB,CAA5B;AACH;;AAJK,GAHgB;AAS1BgB,EAAAA,aAAa,EAAE;AACX,KAACf,cAAc,CAACgB,OAAhB,GAA0B,CAACP,KAAD,EAAOC,MAAP,KAAkB;AACxCD,MAAAA,KAAK,CAACX,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACE,cAAc,CAACiB,SAAhB,GAA4B,CAACR,KAAD,EAAOC,MAAP,KAAkB;AAC1CD,MAAAA,KAAK,CAACX,MAAN,GAAe,SAAf;AACAW,MAAAA,KAAK,CAACV,KAAN,GAAcU,KAAK,CAACV,KAAN,CAAYmB,MAAZ,CAAmBR,MAAM,CAACE,OAA1B,CAAd;AACH,KAPU;AAQX,KAACZ,cAAc,CAACgB,OAAhB,GAA0B,CAACP,KAAD,EAAOC,MAAP,KAAkB;AACxCD,MAAAA,KAAK,CAACX,MAAN,GAAe,sBAAf;AACH;AAVU;AATW,CAAD,CAA7B;AAuBA,OAAO,MAAM;AAAEU,EAAAA;AAAF,IAAkBH,SAAS,CAACc,OAAlC;AACP,eAAed,SAAS,CAACe,OAAzB","sourcesContent":["import  { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    status: '',\r\n    items: []\r\n}\r\n\r\nexport const fetchCartItems = createAsyncThunk('cart/fetchedItems', async () => {\r\n    const items = JSON.parse(localStorage.getItem('cartItems')) || []\r\n\r\n    return items\r\n})\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addedTocart(state,action){\r\n            state.items.push(action.payload)\r\n            localStorage.setItem('cart',JSON.stringify(state.items))\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchCartItems.fulfilled]: (state,action) => {\r\n            state.status = 'success'\r\n            state.items = state.items.concat(action.payload)\r\n        },\r\n        [fetchCartItems.pending]: (state,action) => {\r\n            state.status = 'something went wrong'\r\n        },\r\n    }\r\n})\r\n\r\nexport const { addedTocart } = cartSlice.actions\r\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}