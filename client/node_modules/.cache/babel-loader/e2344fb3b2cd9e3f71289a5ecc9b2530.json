{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  status: '',\n  user: []\n};\nexport const userLoggedIn = createAsyncThunk('user/loggedin', async details => {\n  axios.post('/user/login', details).then(res => {\n    sessionStorage.setItem('user-e-commerce', JSON.stringify(res.data));\n    window.location.href = '/user/profile';\n  }).catch(err => {\n    console.log(err);\n  });\n});\nexport const fetchUser = createAsyncThunk('user/fetched', async () => {\n  const user = JSON.parse(sessionStorage.getItem('user-e-commerce'));\n  return user;\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducer: {},\n  extraReducers: {\n    [fetchUser.pending]: (state, action) => {\n      state.status = 'Loading';\n    },\n    [fetchUser.fulfilled]: (state, action) => {\n      state.status = 'Success';\n      state.user = state.user.concat(action.payload);\n    },\n    [fetchUser.rejected]: (state, action) => {\n      state.status = 'rejected';\n    }\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"sources":["E:/Study Material/Projects/Fullstack/e-commerce/client/src/features/userSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","status","user","userLoggedIn","details","post","then","res","sessionStorage","setItem","JSON","stringify","data","window","location","href","catch","err","console","log","fetchUser","parse","getItem","userSlice","name","reducer","extraReducers","pending","state","action","fulfilled","concat","payload","rejected"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAGL,gBAAgB,CAAC,eAAD,EAAkB,MAAOM,OAAP,IAAkB;AAC5EL,EAAAA,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0BD,OAA1B,EAAmCE,IAAnC,CAAwCC,GAAG,IAAI;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuB,iBAAvB,EAAyCC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAnB,CAAzC;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,eAAvB;AACD,GAHH,EAGKC,KAHL,CAGWC,GAAG,IAAI;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GALH;AAMH,CAP2C,CAArC;AAQP,OAAO,MAAMG,SAAS,GAAGtB,gBAAgB,CAAC,cAAD,EAAiB,YAAY;AAClE,QAAMI,IAAI,GAAGQ,IAAI,CAACW,KAAL,CAAWb,cAAc,CAACc,OAAf,CAAuB,iBAAvB,CAAX,CAAb;AACA,SAAOpB,IAAP;AACH,CAHwC,CAAlC;AAKP,MAAMqB,SAAS,GAAG1B,WAAW,CAAC;AAC1B2B,EAAAA,IAAI,EAAE,MADoB;AAE1BxB,EAAAA,YAF0B;AAG1ByB,EAAAA,OAAO,EAAE,EAHiB;AAM1BC,EAAAA,aAAa,EAAE;AACX,KAACN,SAAS,CAACO,OAAX,GAAqB,CAACC,KAAD,EAAOC,MAAP,KAAkB;AACnCD,MAAAA,KAAK,CAAC3B,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACmB,SAAS,CAACU,SAAX,GAAuB,CAACF,KAAD,EAAOC,MAAP,KAAkB;AACrCD,MAAAA,KAAK,CAAC3B,MAAN,GAAe,SAAf;AACA2B,MAAAA,KAAK,CAAC1B,IAAN,GAAa0B,KAAK,CAAC1B,IAAN,CAAW6B,MAAX,CAAkBF,MAAM,CAACG,OAAzB,CAAb;AACH,KAPU;AAQX,KAACZ,SAAS,CAACa,QAAX,GAAsB,CAACL,KAAD,EAAOC,MAAP,KAAkB;AACpCD,MAAAA,KAAK,CAAC3B,MAAN,GAAe,UAAf;AACH;AAVU;AANW,CAAD,CAA7B;AAoBA,eAAesB,SAAS,CAACE,OAAzB","sourcesContent":["import { createSlice,createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    status: '',\r\n    user: []\r\n}\r\n\r\nexport const userLoggedIn = createAsyncThunk('user/loggedin', async (details)=> {\r\n    axios.post('/user/login', details).then(res => {\r\n        sessionStorage.setItem('user-e-commerce',JSON.stringify(res.data));\r\n        window.location.href = '/user/profile'\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n})\r\nexport const fetchUser = createAsyncThunk('user/fetched', async () => {\r\n    const user = JSON.parse(sessionStorage.getItem('user-e-commerce'))\r\n    return user\r\n})\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducer: {\r\n\r\n    },\r\n    extraReducers: {\r\n        [fetchUser.pending]: (state,action) => {\r\n            state.status = 'Loading'\r\n        },\r\n        [fetchUser.fulfilled]: (state,action) => {\r\n            state.status = 'Success';\r\n            state.user = state.user.concat(action.payload)\r\n        },\r\n        [fetchUser.rejected]: (state,action) => {\r\n            state.status = 'rejected'\r\n        }\r\n    }\r\n})\r\n\r\nexport default userSlice.reducer"]},"metadata":{},"sourceType":"module"}